From ebf7dcb929e04ccb5e4775283da7686d8a57f371 Mon Sep 17 00:00:00 2001
From: Adam Duskett <aduskett@gmail.com>
Date: Tue, 6 Feb 2024 20:43:20 +0100
Subject: [PATCH] chore: Remove google-test as a mandatory dependency

Much like the main mender repository, put the tests in a tests/ directory.
This removes the mandatory dependency on gtest, as embedded platforms such
as Buildroot and Yocto do not want nor need tests built. Also, add a new
option BUILD_TESTS which allows a user to disable building the unit tests.

Also, add a new test "no-tests" to ensure that building with the option
-DBUILD_TESTS=OFF works properly.

Upstream: Merged

Signed-off-by: Adam Duskett <aduskett@gmail.com>
---
 .gitlab-ci.yml                       |  11 +
 CMakeLists.txt                       |  74 +------
 flash_test/optimized_writer_test.cpp | 304 ---------------------------
 flash_test/platformfs_test.cpp       |  68 ------
 tests/CMakeLists.txt                 |  72 +++++++
 {common => tests/common}/testing.cpp |   0
 {common => tests/common}/testing.hpp |   0
 main_test.cpp => tests/main_test.cpp |   0
 8 files changed, 88 insertions(+), 441 deletions(-)
 delete mode 100644 flash_test/optimized_writer_test.cpp
 delete mode 100644 flash_test/platformfs_test.cpp
 create mode 100644 tests/CMakeLists.txt
 rename {common => tests/common}/testing.cpp (100%)
 rename {common => tests/common}/testing.hpp (100%)
 rename main_test.cpp => tests/main_test.cpp (100%)

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index 1755af0..f425015 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -17,6 +17,17 @@ include:
 variables:
   GIT_SUBMODULE_STRATEGY: recursive
 
+test:no-tests:
+  tags:
+    - mender-qa-worker-generic-light
+  stage: test
+  image: debian:11
+  before_script:
+    - apt update && apt install -yyq g++ cmake git make lcov pkg-config
+  script:
+    - cmake -D BUILD_TESTS=OFF .
+    - make --jobs=$(nproc --all) --keep-going
+
 test:unit:
   tags:
     - mender-qa-worker-generic-light
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2cb87a7..c2f4ca5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,38 +12,8 @@ endif (POLICY CMP0135)
 
 project(mender-flash)
 
+option(BUILD_TESTS "Build the unit tests (Default: ON)" ON)
 # set(CMAKE_VERBOSE_MAKEFILE ON)
-enable_testing()
-
-option(COVERAGE "Turn coverage instrumentation on (Default: OFF)" OFF)
-if($CACHE{COVERAGE})
-  set(CMAKE_CXX_FLAGS "--coverage $CACHE{CMAKE_CXX_FLAGS}")
-endif()
-
-set(GTEST_VERSION 1.12.1)
-
-option(MENDER_DOWNLOAD_GTEST "Download google test if it is not found (Default: ON)" ON)
-
-if (MENDER_DOWNLOAD_GTEST)
-
-  ### BEGIN taken from https://google.github.io/googletest/quickstart-cmake.html
-  include(FetchContent)
-  FetchContent_Declare(
-    googletest
-    URL https://github.com/google/googletest/archive/refs/tags/release-${GTEST_VERSION}.zip
-  )
-
-  # For Windows: Prevent overriding the parent project's compiler/linker settings
-  set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
-  ### END
-
-  set(BUILD_GMOCK ON)
-  set(INSTALL_GTEST OFF)
-  FetchContent_MakeAvailable(googletest)
-
-else()
-  find_package(GTest REQUIRED)
-endif()
 
 # TODO: proper platform detection
 set(PLATFORM linux_x86)
@@ -75,32 +45,6 @@ install(TARGETS mender-flash
 target_include_directories(mender-flash PUBLIC .)
 target_link_libraries(mender-flash flashlib)
 
-if($CACHE{COVERAGE})
-  add_custom_target(coverage_enabled COMMAND true)
-else()
-  add_custom_target(coverage_enabled
-    COMMAND echo 'Please run `cmake -D COVERAGE=ON .` first!'
-    COMMAND false
-  )
-endif()
-
-add_custom_target(coverage
-  COMMAND lcov --capture --quiet --directory .
-               --output-file coverage.lcov
-               --exclude '/usr/*'
-               --exclude '*/googletest/*'
-               --exclude '*_test.*'
-               --exclude '*/googlemock/*'
-               --exclude '*/vendor/*'
-  DEPENDS coverage_enabled check
-)
-
-# CMake is not clever enough to build the tests before running them so we use
-# the 'check' target below that does both.
-add_custom_target(check
-  COMMAND ${CMAKE_CTEST_COMMAND}
-  DEPENDS mender-flash_test
-)
 
 # CMake doesn't generate the 'uninstall' target.
 configure_file(
@@ -120,13 +64,10 @@ add_custom_target(uninstall-bin
   WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
 )
 
-include(GoogleTest)
-set(MENDER_TEST_FLAGS EXTRA_ARGS --gtest_output=xml:${CMAKE_SOURCE_DIR}/reports/)
-
 # Find all the source files in the flash and common directories
 set(FLASH_SOURCES "libflash/fileio.cpp" "libflash/optimized_writer.cpp" "libflash/platformfs.cpp")
 set(COMMON_SOURCES "common/io.cpp" "common/io.cpp" "common/error.cpp" "common/io.cpp" "common/common.cpp")
-set(TESTLIB_SOURCES "common/testing.cpp")
+
 
 # Combine the source files from both directories into one list
 set(LIB_SOURCES ${FLASH_SOURCES} ${COMMON_SOURCES})
@@ -136,11 +77,6 @@ add_library(flashlib STATIC ${LIB_SOURCES})
 target_include_directories(flashlib PUBLIC ${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/libflash ${CMAKE_SOURCE_DIR}/vendor/expected/include)
 target_link_libraries(flashlib PUBLIC crossplatform_compiler_flags)
 
-add_library(testlib STATIC ${TESTLIB_SOURCES})
-target_include_directories(testlib PUBLIC ${CMAKE_SOURCE_DIR})
-target_link_libraries(testlib PUBLIC platform_compiler_flags)
-
-add_executable(mender-flash_test EXCLUDE_FROM_ALL "main_test.cpp" "flash_test/optimized_writer_test.cpp" "flash_test/platformfs_test.cpp")
-target_include_directories(mender-flash_test PUBLIC ${CMAKE_SOURCE_DIR} libflash common)
-target_link_libraries(mender-flash_test PRIVATE GTest::gtest_main flashlib testlib)
-gtest_discover_tests(mender-flash_test ${MENDER_TEST_FLAGS})
+if(BUILD_TESTS)
+  add_subdirectory(tests)
+endif()
diff --git a/flash_test/optimized_writer_test.cpp b/flash_test/optimized_writer_test.cpp
deleted file mode 100644
index 3366712..0000000
--- a/flash_test/optimized_writer_test.cpp
+++ /dev/null
@@ -1,304 +0,0 @@
-// Copyright 2023 Northern.tech AS
-//
-//    Licensed under the Apache License, Version 2.0 (the "License");
-//    you may not use this file except in compliance with the License.
-//    You may obtain a copy of the License at
-//
-//        http://www.apache.org/licenses/LICENSE-2.0
-//
-//    Unless required by applicable law or agreed to in writing, software
-//    distributed under the License is distributed on an "AS IS" BASIS,
-//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-//    See the License for the specific language governing permissions and
-//    limitations under the License.
-
-#include <gtest/gtest.h>
-#include <filesystem>
-#include <fileio.hpp>
-#include <testing.hpp>
-#include <optimized_writer.hpp>
-
-class OptimizedWriterTest : public testing::Test {};
-
-class StringFileReader : public mender::io::FileReader {
-public:
-	StringFileReader(const std::string &str) :
-		mender::io::FileReader(-1),
-		ss_(str),
-		reader_(ss_) {
-	}
-	virtual ExpectedSize Tell() const override {
-		return bytesRead_;
-	}
-	virtual ExpectedSize Read(
-		vector<uint8_t>::iterator start, vector<uint8_t>::iterator end) override {
-		auto ret = reader_.Read(start, end);
-		if (ret) {
-			bytesRead_ += ret.value();
-		}
-		return ret;
-	}
-
-private:
-	std::stringstream ss_;
-	mender::common::io::StreamReader reader_;
-	size_t bytesRead_ {0};
-};
-
-TEST_F(OptimizedWriterTest, TestFlushingLimitWriterWrite) {
-	// prepare a temp dir
-	mender::common::testing::TemporaryDirectory tempDir;
-	auto path = tempDir.Path() + "/foo";
-
-	// Write some junk to the file
-	auto s = mender::io::WriteFile(path, {'a', 'b', 'x', 'd', 'r', 'z', '1', '2', '3', '4'});
-	ASSERT_TRUE(s) << s.error().message;
-
-	auto f = mender::io::Open(path, true, true);
-	ASSERT_TRUE(f) << f.error().message;
-	mender::io::File fd = f.value();
-
-	// set a limit to 10bytes
-	mender::io::LimitedFlushingWriter writer(fd, 10);
-
-	mender::io::Bytes payloadBuf {'f', 'o', 'o', 'b', 'a', 'r'};
-	auto expectedBytesWritten = payloadBuf.size();
-
-	auto res = writer.Write(payloadBuf.begin(), payloadBuf.end());
-	ASSERT_TRUE(res) << res.error().message;
-	ASSERT_EQ(res.value(), expectedBytesWritten);
-}
-
-TEST_F(OptimizedWriterTest, TestFlushingLimitWriterWriteNegative) {
-	// prepare a temp dir
-	mender::common::testing::TemporaryDirectory tempDir;
-	auto path = tempDir.Path() + "/foo";
-
-	auto createRes = mender::io::Create(path);
-	ASSERT_EQ(createRes, NoError) << createRes;
-
-	auto f = mender::io::Open(path, true, true);
-	ASSERT_TRUE(f) << f.error().message;
-	mender::io::File fd = f.value();
-
-	// set a limit to 10bytes
-	mender::io::LimitedFlushingWriter writer(fd, 10);
-
-	// create a 12 byte buffer
-	mender::io::Bytes payloadBuf {'f', 'o', 'o', 'b', 'a', 'r', 'f', 'o', 'o', 'b', 'a', 'r'};
-
-	auto res = writer.Write(payloadBuf.begin(), payloadBuf.end());
-	ASSERT_FALSE(res) << "Data written beyound the device limit";
-
-	// check if the file is empty
-	auto sizeRes = mender::io::GetSize(fd);
-	ASSERT_TRUE(sizeRes);
-	ASSERT_EQ(0, sizeRes.value());
-}
-
-TEST_F(OptimizedWriterTest, TestOptimizedWriter) {
-	// prepare a temp dir
-	mender::common::testing::TemporaryDirectory tempDir;
-	auto path = tempDir.Path() + "/foo";
-
-	std::stringstream ss;
-	ss << "dd if=/dev/urandom of=" << path << " bs=1M count=10 status=none";
-	system(ss.str().c_str());
-
-	// create a reader
-	auto f = mender::io::Open(path, true, false);
-	ASSERT_TRUE(f) << f.error().message;
-	mender::io::File fd = f.value();
-	mender::io::FileReader reader(fd);
-
-	// create a writer
-	auto path2 = path + ".copy";
-	auto createRes = mender::io::Create(path2);
-	ASSERT_EQ(createRes, NoError) << createRes;
-	auto f2 = mender::io::Open(path2, true, true);
-	ASSERT_TRUE(f2) << f2.error().message;
-	mender::io::File fd2 = f2.value();
-	mender::io::FileWriter writer(fd2);
-
-	// create read-writer
-	mender::io::FileReadWriterSeeker readWriter(writer);
-
-	// create optimized-writer
-	mender::io::OptimizedWriter optWriter(reader, readWriter);
-	auto copyRes = optWriter.Copy(true);
-	ASSERT_EQ(copyRes, NoError) << copyRes.message;
-
-	auto stats = optWriter.GetStatistics();
-	ASSERT_EQ(stats.blocksWritten_, 10);
-	ASSERT_EQ(stats.blocksOmitted_, 0);
-	ASSERT_EQ(stats.bytesWritten_, 10 * 1024 * 1024);
-
-	// rewind the files
-	mender::io::SeekSet(fd, 0);
-	mender::io::SeekSet(fd2, 0);
-
-	// copy the data
-	auto copyRes2 = optWriter.Copy(true);
-	ASSERT_EQ(copyRes2, NoError) << copyRes.message;
-
-	auto stats2 = optWriter.GetStatistics();
-	ASSERT_EQ(stats2.blocksWritten_, 0);
-	ASSERT_EQ(stats2.blocksOmitted_, 10);
-	ASSERT_EQ(stats2.bytesWritten_, 0);
-
-	// rewind the files
-	mender::io::SeekSet(fd, 0);
-	mender::io::SeekSet(fd2, 0);
-
-	// copy the data (not optimized)
-	auto copyRes3 = optWriter.Copy(false);
-	ASSERT_EQ(copyRes3, NoError) << copyRes.message;
-
-	auto stats3 = optWriter.GetStatistics();
-	ASSERT_EQ(stats3.blocksWritten_, 10);
-	ASSERT_EQ(stats3.blocksOmitted_, 0);
-	ASSERT_EQ(stats3.bytesWritten_, 10 * 1024 * 1024);
-}
-
-TEST_F(OptimizedWriterTest, TestOptimizedWriterFailure) {
-	// prepare a temp dir
-	mender::common::testing::TemporaryDirectory tempDir;
-	auto path = tempDir.Path() + "/foo";
-
-	std::stringstream ss;
-	ss << "dd if=/dev/urandom of=" << path << " bs=1M count=10 status=none";
-	system(ss.str().c_str());
-
-	// create a reader
-	auto f = mender::io::Open(path, true, false);
-	ASSERT_TRUE(f) << f.error().message;
-	mender::io::File fd = f.value();
-	mender::io::FileReader reader(fd);
-
-	auto path2 = path + ".copy";
-	auto createRes = mender::io::Create(path2);
-	ASSERT_EQ(createRes, NoError) << createRes;
-	auto f2 = mender::io::Open(path2, true, true);
-	ASSERT_TRUE(f2) << f2.error().message;
-	mender::io::File fd2 = f2.value();
-
-	// TEST 1
-	{
-		mender::io::FileWriter writer(fd2);
-
-		// create read-writer
-		mender::io::FileReadWriterSeeker readWriter(writer);
-
-		// create optimized-writer
-		mender::io::OptimizedWriter optWriter(reader, readWriter);
-		auto copyRes = optWriter.Copy(true);
-		ASSERT_EQ(copyRes, NoError) << copyRes.message;
-
-		auto stats = optWriter.GetStatistics();
-		ASSERT_EQ(stats.blocksWritten_, 10);
-		ASSERT_EQ(stats.blocksOmitted_, 0);
-		ASSERT_EQ(stats.bytesWritten_, 10 * 1024 * 1024);
-	}
-
-	// TEST 2
-	{
-		// rewind the input file
-		mender::io::SeekSet(fd, 0);
-
-		// reopen the dst file (no write permission)
-		f2 = mender::io::Open(path2, true, false);
-		ASSERT_TRUE(f2) << f.error().message;
-		fd2 = f2.value();
-		mender::io::FileWriter writer2(fd2);
-
-		// create read-writer
-		mender::io::FileReadWriterSeeker readWriter2(writer2);
-
-		// create optimized-writer
-		mender::io::OptimizedWriter optWriter2(reader, readWriter2);
-		auto copyRes2 = optWriter2.Copy(false);
-		ASSERT_NE(copyRes2, NoError);
-	}
-
-	// TEST 3: source too short
-	{
-		// rewind the input file
-		mender::io::SeekSet(fd, 0);
-
-		// reopen the dst file (no write permission)
-		f2 = mender::io::Open(path2, true, true);
-		ASSERT_TRUE(f2) << f.error().message;
-		fd2 = f2.value();
-		mender::io::FileWriter writer3(fd2);
-
-		// create read-writer
-		mender::io::FileReadWriterSeeker readWriter3(writer3);
-
-		// create optimized-writer
-		mender::io::OptimizedWriter optWriter3(reader, readWriter3, 1024 * 1024, 11 * 1024 * 1024);
-		auto copyRes3 = optWriter3.Copy(false);
-		ASSERT_NE(copyRes3, NoError);
-		ASSERT_EQ(
-			copyRes3.message, "Size of the destination volume not reached, source too short.");
-	}
-
-	// TEST 4: source too big
-	{
-		// rewind the input file
-		mender::io::SeekSet(fd, 0);
-
-		// reopen the dst file (no write permission)
-		f2 = mender::io::Open(path2, true, true);
-		ASSERT_TRUE(f2) << f.error().message;
-		fd2 = f2.value();
-		mender::io::FileWriter writer4(fd2);
-
-		// create read-writer
-		mender::io::FileReadWriterSeeker readWriter4(writer4);
-
-		// create optimized-writer
-		mender::io::OptimizedWriter optWriter4(reader, readWriter4, 1024 * 1024, 9 * 1024 * 1024);
-		auto copyRes4 = optWriter4.Copy(false);
-		ASSERT_NE(copyRes4, NoError);
-		ASSERT_EQ(copyRes4.message, "Reached size of the destination volume, source too big.");
-	}
-}
-
-TEST_F(OptimizedWriterTest, TestOptimizedWriterLimit) {
-	// prepare a temp dir
-	mender::common::testing::TemporaryDirectory tempDir;
-
-	struct {
-		std::string input;
-		int inputSize;
-		int blockSize;
-		int expectedBlockWritten;
-		int expectedBytesWritten;
-	} tests[] = {{"foobarfoobarfoobar", 10, 6, 1, 6}, {"fo", 0, 2, 1, 2}, {"foobar", 0, 4, 2, 6}};
-
-	for (unsigned i = 0; i < sizeof(tests) / sizeof(tests[0]); ++i) {
-		auto path = tempDir.Path() + "/foo" + std::to_string(i);
-		StringFileReader reader(tests[i].input);
-
-		// create writer
-		auto createRes = mender::io::Create(path);
-		ASSERT_EQ(createRes, NoError) << createRes;
-		auto f = mender::io::Open(path, true, true);
-		ASSERT_TRUE(f) << f.error().message;
-		mender::io::File fd = f.value();
-		mender::io::FileWriter writer(fd);
-
-		// create read-writer
-		mender::io::FileReadWriterSeeker readWriter(writer);
-
-		// create optimized-writer
-		mender::io::OptimizedWriter optWriter(
-			reader, readWriter, tests[i].blockSize, tests[i].inputSize);
-		optWriter.Copy(true);
-
-		auto stats = optWriter.GetStatistics();
-		ASSERT_EQ(stats.blocksWritten_, tests[i].expectedBlockWritten);
-		ASSERT_EQ(stats.blocksOmitted_, 0);
-		ASSERT_EQ(stats.bytesWritten_, tests[i].expectedBytesWritten);
-	}
-}
diff --git a/flash_test/platformfs_test.cpp b/flash_test/platformfs_test.cpp
deleted file mode 100644
index 43b17cb..0000000
--- a/flash_test/platformfs_test.cpp
+++ /dev/null
@@ -1,68 +0,0 @@
-// Copyright 2023 Northern.tech AS
-//
-//    Licensed under the Apache License, Version 2.0 (the "License");
-//    you may not use this file except in compliance with the License.
-//    You may obtain a copy of the License at
-//
-//        http://www.apache.org/licenses/LICENSE-2.0
-//
-//    Unless required by applicable law or agreed to in writing, software
-//    distributed under the License is distributed on an "AS IS" BASIS,
-//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-//    See the License for the specific language governing permissions and
-//    limitations under the License.
-
-#include <gtest/gtest.h>
-#include <filesystem>
-#include <libflash/platformfs.hpp>
-#include <testing.hpp>
-
-
-class PlatformFsTest : public testing::Test {};
-
-
-TEST_F(PlatformFsTest, OpenFile) {
-	mender::common::testing::TemporaryDirectory tempDir;
-
-	// fail to open file - non-existing
-	auto res = mender::io::Open(tempDir.Path() + "non-existing-file", true, false);
-	ASSERT_FALSE(res);
-
-	// create a file
-	auto testFileName = tempDir.Path() + "test_file";
-	mender::io::Bytes vec = {'f', 'o', 'o', 'b', 'a', 'r'};
-	auto size = mender::io::WriteFile(testFileName, vec);
-	ASSERT_TRUE(size);
-	ASSERT_EQ(size.value(), vec.size());
-
-	// fail to open file - wrong flags
-	auto testFileFail = mender::io::Open(testFileName, false, false);
-	ASSERT_FALSE(testFileFail);
-
-	auto testFile = mender::io::Open(testFileName, true, false);
-	ASSERT_TRUE(testFile);
-
-	mender::io::File testFd = testFile.value();
-
-	auto blockRes = mender::io::IsSpecialBlockDevice(testFd);
-	ASSERT_TRUE(blockRes);
-	ASSERT_FALSE(blockRes.value());
-
-	auto ubiRes = mender::io::IsUBIDevice(testFileName);
-	ASSERT_TRUE(ubiRes);
-	ASSERT_FALSE(ubiRes.value());
-
-	auto fileSize = mender::io::GetSize(testFd);
-	ASSERT_TRUE(fileSize);
-	ASSERT_EQ(fileSize.value(), vec.size());
-
-	auto tellRes = mender::io::Tell(testFd);
-	ASSERT_TRUE(tellRes);
-	ASSERT_EQ(tellRes.value(), 0);
-
-	auto ubiUptadeRes = mender::io::SetUbiUpdateVolume(testFd, 10);
-	ASSERT_NE(ubiUptadeRes, NoError);
-
-	auto closeRes = mender::io::Close(testFile.value());
-	ASSERT_EQ(NoError, closeRes);
-}
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
new file mode 100644
index 0000000..cbace53
--- /dev/null
+++ b/tests/CMakeLists.txt
@@ -0,0 +1,72 @@
+enable_testing()
+
+option(COVERAGE "Turn coverage instrumentation on (Default: OFF)" OFF)
+if($CACHE{COVERAGE})
+  set(CMAKE_CXX_FLAGS "--coverage $CACHE{CMAKE_CXX_FLAGS}")
+endif()
+
+set(GTEST_VERSION 1.12.1)
+
+option(MENDER_DOWNLOAD_GTEST "Download google test if it is not found (Default: ON)" ON)
+
+if (MENDER_DOWNLOAD_GTEST)
+
+  ### BEGIN taken from https://google.github.io/googletest/quickstart-cmake.html
+  include(FetchContent)
+  FetchContent_Declare(
+    googletest
+    URL https://github.com/google/googletest/archive/refs/tags/release-${GTEST_VERSION}.zip
+  )
+
+  # For Windows: Prevent overriding the parent project's compiler/linker settings
+  set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
+  ### END
+
+  set(BUILD_GMOCK ON)
+  set(INSTALL_GTEST OFF)
+  FetchContent_MakeAvailable(googletest)
+
+else()
+  find_package(GTest REQUIRED)
+endif()
+
+if($CACHE{COVERAGE})
+  add_custom_target(coverage_enabled COMMAND true)
+else()
+  add_custom_target(coverage_enabled
+    COMMAND echo 'Please run `cmake -D COVERAGE=ON .` first!'
+    COMMAND false
+  )
+endif()
+
+add_custom_target(coverage
+  COMMAND lcov --capture --quiet --directory .
+               --output-file coverage.lcov
+               --exclude '/usr/*'
+               --exclude '*/googletest/*'
+               --exclude '*_test.*'
+               --exclude '*/googlemock/*'
+               --exclude '*/vendor/*'
+  DEPENDS coverage_enabled check
+)
+
+# CMake is not clever enough to build the tests before running them so we use
+# the 'check' target below that does both.
+add_custom_target(check
+  COMMAND ${CMAKE_CTEST_COMMAND}
+  DEPENDS mender-flash_test
+)
+
+include(GoogleTest)
+set(MENDER_TEST_FLAGS EXTRA_ARGS --gtest_output=xml:${CMAKE_SOURCE_DIR}/reports/)
+include_directories(${CMAKE_SOURCE_DIR}/ ${CMAKE_SOURCE_DIR}/tests/)
+set(TESTLIB_SOURCES "common/testing.cpp")
+add_library(testlib STATIC ${TESTLIB_SOURCES})
+target_include_directories(testlib PUBLIC ${CMAKE_SOURCE_DIR})
+target_link_libraries(testlib PUBLIC platform_compiler_flags)
+
+add_executable(mender-flash_test EXCLUDE_FROM_ALL "main_test.cpp" "flash_test/optimized_writer_test.cpp" "flash_test/platformfs_test.cpp")
+target_include_directories(mender-flash_test PUBLIC ${CMAKE_SOURCE_DIR} libflash common)
+target_link_libraries(mender-flash_test PRIVATE GTest::gtest_main flashlib testlib)
+gtest_discover_tests(mender-flash_test ${MENDER_TEST_FLAGS})
+
diff --git a/common/testing.cpp b/tests/common/testing.cpp
similarity index 100%
rename from common/testing.cpp
rename to tests/common/testing.cpp
diff --git a/common/testing.hpp b/tests/common/testing.hpp
similarity index 100%
rename from common/testing.hpp
rename to tests/common/testing.hpp
diff --git a/main_test.cpp b/tests/main_test.cpp
similarity index 100%
rename from main_test.cpp
rename to tests/main_test.cpp
-- 
2.43.0

